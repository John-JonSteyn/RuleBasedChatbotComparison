#separator:tab
#html:false
#guid column:1
#notetype column:2
#deck column:3
s=o/{_8VCx	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How does Python’s syntax contribute to its suitability for beginners, as discussed in Chapter 2 of Culturally Responsive Computing?	Python’s clean, readable syntax emphasizes simplicity and clarity; it uses indentation to define code blocks (instead of braces or block keywords), which helps beginners read and write code more easily. (Chapter 2, Culturally Responsive Computing)
dsn=xR8H]W	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the main types of Python data types mentioned in Chapter 2 of Culturally Responsive Computing?	Binary: bytes, bytearray, memoryview • Boolean: True, False • Mapping: dict • Numeric: int, float, complex • Sequence: list, tuple, range • Set: set, frozenset • Text: str. (Chapter 2, Culturally Responsive Computing)
N>%/H$le]y	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Explain the difference between a for loop and a while loop in Python	A for loop iterates over a sequence (e.g., list, tuple) with a predefined number of iterations, while a while loop repeatedly executes as long as a condition is true, potentially leading to infinite loops if the condition never becomes false.
qmbG*HKvmy	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What happens when a break statement is used in a Python loop?	`break` immediately exits the nearest enclosing loop, skipping any remaining iterations.
BpLV?Ss.aJ	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the purpose of the continue keyword in a Python loop?	`continue` skips the rest of the current iteration and proceeds with the next iteration of the loop.
lm;y?q[i:}	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the role of the __init__ method in a Python class?	`__init__` is the constructor that runs after a new instance is created and initializes instance attributes (e.g., `self.x = x`).
e[-r,0S:V&	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How do natural languages influence programming languages, according to Chapter 2 of Culturally Responsive Computing?	Natural languages shape programming languages through syntax and vocabulary (e.g., Python’s English-like keywords such as `if`, `else`, `for`). This can ease learning for native speakers and pose hurdles for non-native speakers. (Chapter 2, Culturally Responsive Computing)
j751=%tr=D	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How can cultural differences in language structure affect programming, as discussed in Chapter 2 of Culturally Responsive Computing?	Structures like topic–comment (e.g., Chinese) vs. subject–verb–object (e.g., English) can influence how programmers plan and organize code and explanations. (Chapter 2, Culturally Responsive Computing)
Qk6Zf`b.UN	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Explain the difference between deductive and inductive reasoning, as covered in Chapter 2 of Culturally Responsive Computing.	Deductive: from a general rule to a specific conclusion (validity depends on the premises). Inductive: from specific observations to a general conclusion (plausible but not guaranteed). (Chapter 2, Culturally Responsive Computing)
igS_QC8rKL	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How can cultural biases in programming lead to exclusionary software, according to Chapter 2 of Culturally Responsive Computing?	Assumptions about users’ language fluency, access, or norms can make software inaccessible; stereotypes (e.g., gendered defaults) can exclude or harm users. (Chapter 2, Culturally Responsive Computing)
fD%>&S.DS5	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why are diverse perspectives important in software development, as discussed in Chapter 2 of Culturally Responsive Computing?	Diverse teams better spot biases, generate more creative solutions, and build more inclusive products that serve global audiences. (Chapter 2, Culturally Responsive Computing)
BBy?aaevBB	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How can Python handle culturally sensitive date formats, as described in Chapter 2 of Culturally Responsive Computing?	Use `datetime.strftime()` to format dates (e.g., `%d/%m/%Y` vs `%m/%d/%Y`) and `datetime.strptime()` to parse locale-specific strings, enabling culturally appropriate date handling. (Chapter 2, Culturally Responsive Computing)
h,8!gS3g~s	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the difference between localization and internationalization in applications, per Chapter 2 of Culturally Responsive Computing?	Localization is the process of adapting an application to a specific culture or locale, such as translating the interface into a local language or adjusting date formats. Internationalization is the design of an application so that it can be easily adapted for different cultures, for example by supporting Unicode and using external translation files. (Chapter 2, Culturally Responsive Computing)
I6TAWRTm$R	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What distinguishes an argument or explanation from a mere collection of propositions, per Chapter 1 of Everyday Life to Formal Systems?	An argument or explanation is a collection of propositions in which the speaker intends the truth of one proposition (the conclusion) to follow from the truth of other propositions (the premises). A mere collection of propositions lacks this intention and does not suggest any logical dependence. (Chapter 1, Everyday Life to Formal Systems)
K[$Kf~e@A)	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How do explanations and arguments differ in their purpose per Chapter 1 of Everyday Life to Formal Systems?	An explanation shows why a proposition that might not have been expected is nevertheless true, typically after the fact. An argument shows why a proposition that is not already accepted should be believed, typically before the fact. Both require that the conclusion logically follow from the premises. (Chapter 1, Everyday Life to Formal Systems)
EVFP+3cWsH	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the standard logical form for an argument or explanation per Chapter 1 of Everyday Life to Formal Systems?	The standard logical form places premises first and the conclusion last, for example: Premise 1, Premise 2, … Premise n, therefore Conclusion. Alternatively, it may be set out laterally: Premise 1 / Premise 2 / … / Premise n // Conclusion. (Chapter 1, Everyday Life to Formal Systems)
Z|z!NwiOZ	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are premise-indicators and conclusion-indicators per Chapter 1 of Everyday Life to Formal Systems? Provide two examples of each.	Premise-indicators are words that signal a supporting statement, such as “since” or “because.” Conclusion-indicators signal that what follows is the conclusion, such as “therefore” or “thus.” (Chapter 1, Everyday Life to Formal Systems)
PxBXqog^D~	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a conclusion-indicator per Chapter 1 of Everyday Life to Formal Systems?	A conclusion-indicator is a word, phrase, or symbol that signals what follows is the conclusion of an argument or explanation. Examples include “therefore,” “so,” and “hence.” (Chapter 1, Everyday Life to Formal Systems)
xiwP:YP@&3	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the role of logic in evaluating arguments per Chapter 1 of Everyday Life to Formal Systems?	Logic provides the criteria for deciding whether a conclusion follows from a given set of premises, clarifying the reasoning process and separating good arguments from poor ones. (Chapter 1, Everyday Life to Formal Systems)
n^OJ,5A{`x	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the logical form of Modus Ponens?	The logical form of Modus Ponens is: If P then Q; P; therefore Q.
pVCQAX<-aV	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why is logic considered basic to human communication per Chapter 1 of Everyday Life to Formal Systems?	Logic is fundamental to human reasoning and communication because it governs how we infer conclusions from premises, regardless of whether we have formal training. (Chapter 1, Everyday Life to Formal Systems)
utYJ6awPWn	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How does logic distinguish between form and content in arguments per Chapter 1 of Everyday Life to Formal Systems?	Logic examines the form or structure of arguments—the pattern of propositions—while ignoring their content. Validity depends on form, not on the subject matter or truth of the statements. (Chapter 1, Everyday Life to Formal Systems)
xg_?9fTDJ?	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is deductive logic per Chapter 1 of Everyday Life to Formal Systems?	Deductive logic is reasoning in which the conclusion must be true if the premises are true. It is used in mathematics, science, and law, where certainty and soundness are required. (Chapter 1, Everyday Life to Formal Systems)
M>lT<R~9fG	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How does inductive logic differ from deductive logic?	In inductive logic, true premises make the conclusion more probable but do not guarantee it. In deductive logic, if the premises are true and the reasoning is valid, the conclusion is guaranteed to be true.
"tL88ywN>3#"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is Aristotelian (categorical) logic per Chapter 1 of Everyday Life to Formal Systems?	Aristotelian or categorical logic is a system of deductive reasoning in which propositions are expressed as relationships between subject classes and predicate classes, such as “All S are P.” (Chapter 1, Everyday Life to Formal Systems)
duk*z5:VSO	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the four categorical propositional forms in Aristotelian logic?	The four forms are: A – All S are P; E – No S are P; I – Some S are P; O – Some S are not P.
HhDu8[d7J6	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What determines the form of a proposition in Aristotelian logic?	The form of a proposition is determined by the logical relationship between the subject and predicate classes, not by the content or truth of the statement.
f6c1P$Zsxo	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a valid deductive argument?	A valid deductive argument is one whose form ensures that if the premises are true, the conclusion must also be true, thereby transferring truth from premises to conclusion.
vUH5ROY}GO	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is an invalid deductive argument?	An invalid deductive argument is one with a form such that it is possible for all the premises to be true and the conclusion still false.
mw1}a>)C(z	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is refutation by analogy in deductive logic?	Refutation by analogy shows that an argument form is invalid by constructing a parallel argument with the same form, true premises, and a false conclusion.
K8.rEo8tb2	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a sound deductive argument?	A sound deductive argument is valid in form and has all true premises, which makes the conclusion necessarily true as well.
c,koyk37)1	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a fallacious deductive argument?	A fallacious deductive argument is one that is unsound because it either has an invalid logical form or contains at least one false premise, meaning the conclusion cannot be relied upon. (Chapter 1, Everyday Life to Formal Systems)
k;8(rTSg}d	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is truth-functional logic?	Truth-functional logic is a deductive logic system where whole propositions are represented by variables (such as p, q) and combined using logical connectives—“and,” “or,” “if…then,” and “not”—to form compound propositions. (Chapter 1, Everyday Life to Formal Systems)
sph@oDVTa-	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the four main propositional forms in truth-functional logic?	The four main propositional forms in truth-functional logic are: conditional (if P then Q), conjunction (P and Q), disjunction (P or Q), and negation (not Q). (Chapter 1, Everyday Life to Formal Systems)
l^R`W;<uf+	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How do variables in truth-functional logic differ from those in categorical logic?	In truth-functional logic, variables represent complete propositions, whereas in categorical logic, variables represent classes of things. (Chapter 1, Everyday Life to Formal Systems)
Q*/QS5IPAd	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	"What is the logical form of an invalid truth-functional argument like ""If P then Q / Q // P""?"	The logical form of the invalid argument “If P then Q; Q; therefore P” is invalid because true premises can lead to a false conclusion, as shown by refutation by analogy. (Chapter 1, Everyday Life to Formal Systems)
p`MQ)QT9gR	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why is refutation by analogy used in truth-functional logic?	Refutation by analogy is used in truth-functional logic to show that an argument form is invalid by constructing another argument with the same logical form where the premises are true but the conclusion is false. (Chapter 1, Everyday Life to Formal Systems)
J?9>3QllIY	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why is determining the relationship between premises and conclusion important in logic?	Determining the relationship between premises and the conclusion is important because it clarifies whether the truth of the premises guarantees the truth of the conclusion, ensuring the argument is valid and potentially sound. (Chapter 1, Everyday Life to Formal Systems)
DAq9A:?>Tu	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a categorical proposition?	A categorical proposition in Aristotelian logic is a statement that relates two categories, or classes, a subject and a predicate, by means of a copula that affirms or denies inclusion. (Chapter 1, Everyday Life to Formal Systems)
IGL.C7/nM]	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the copula in a categorical proposition?	The copula in a categorical proposition is the connector between the subject and predicate that specifies whether members of the subject category are included in (affirmative) or excluded from (negative) the predicate category. (Chapter 1, Everyday Life to Formal Systems)
k+EBhEy5wm	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What does the quantity of a categorical proposition specify?	The quantity of a categorical proposition specifies how much of the subject category is included in or excluded from the predicate category, either “all” (universal) or “some” (particular). (Chapter 1, Everyday Life to Formal Systems)
"I0#@uJBC=v"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the quality of a copula in a categorical proposition?	The quality of the copula indicates whether it affirms (inclusion) or denies (exclusion) the relationship between the subject and predicate categories, classified as affirmative or negative.
q4~49Vr|vO	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the four standard forms of categorical propositions?	The four standard forms of categorical propositions are: A – All S are P (Universal Affirmative), E – No S are P (Universal Negative), I – Some S are P (Particular Affirmative), and O – Some S are not P (Particular Negative). (Chapter 1, Everyday Life to Formal Systems)
ePwab~wn*|	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	"Why is the form ""All S are not P"" considered ambiguous?"	The form “All S are not P” is considered ambiguous because it can mean either “No S are P” (E form) or “Some S are not P” (O form), which may cause misinterpretation. (Chapter 1, Everyday Life to Formal Systems)
OAPNT$%Fl7	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a universal proposition?	A universal proposition makes a claim about every member of the subject category, for example: “All S are P” (A form) or “No S are P” (E form). (Chapter 1, Everyday Life to Formal Systems)
A-yl>Z-k_/	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a particular proposition?	A particular proposition makes a claim about some, or at least one, member of the subject category, for example: “Some S are P” (I form) or “Some S are not P” (O form). (Chapter 1, Everyday Life to Formal Systems)
"w#=c=Gs{;)"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the denotative meaning of a term?	The denotative meaning refers to the actual individuals or objects in the class to which the term applies, known as its extension.
"CMn68^LX#X"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the connotative meaning of a term?	The connotative meaning of a term is its intension, referring to the set of qualities, properties, or characteristics shared by all objects to which the term applies. (Chapter 1, Everyday Life to Formal Systems)
lA!f+ab-D_	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is an ostensive definition?	An ostensive definition is a denotative definition that clarifies a term by directly pointing to or producing an actual example of the class it refers to. (Chapter 1, Everyday Life to Formal Systems)
D_1}dt&/!f	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a connotative definition?	A connotative definition is one that presents the set of properties (genus and difference) that identify a term and distinguish it from other terms. (Chapter 1, Everyday Life to Formal Systems)
LiHpCr~I65	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the genus in a connotative definition?	The general class to which the term belongs, of which the term is a subclass.
4VTthxoEZ	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the difference in a connotative definition?	The difference in a connotative definition is the property or set of properties that distinguishes the definiendum from other subclasses of the same genus. (Chapter 1, Everyday Life to Formal Systems)
fU{d/Ea;n:	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the definiendum?	The definiendum is the term that is being defined in a definition. (Chapter 1, Everyday Life to Formal Systems)
i:2HmXQ}jW	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the definiens?	The definiens is the definition itself, which clarifies the meaning of the definiendum. (Chapter 1, Everyday Life to Formal Systems)
"f$oE#[sTLy"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a functional definition?	A functional definition is a connotative definition where the specific difference is described in terms of the particular use or function of the genus. (Chapter 1, Everyday Life to Formal Systems)
C0AbeTO*5u	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is an operational definition?	An operational definition is a connotative definition where the specific difference is a public and repeatable procedure with measurable outcomes. (Chapter 1, Everyday Life to Formal Systems)
I}Q!zUHHj&	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a stipulative definition?	A stipulative definition introduces a new term and stipulates its genus and difference to establish its intended meaning, regardless of prior usage. (Chapter 2, Everyday Life to Formal Systems)
L&mG/jr:^7	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a theoretical definition?	A theoretical definition explains the meaning of a term using concepts specific to a scientific theory, linking it to broader explanatory frameworks. (Chapter 2, Everyday Life to Formal Systems)
FIcjCP].$k	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a lexical definition?	A lexical definition reports the commonly accepted meaning of a term as found in standard dictionaries. (Chapter 2, Everyday Life to Formal Systems)
H,ag9TiW[t	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a synonymous definition?	A synonymous definition clarifies the meaning of a term by providing another term with the same meaning. (Chapter 2, Everyday Life to Formal Systems)
x2QL%F!Sc7	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is Rule 1 for definition by genus and difference, according to Chapter 2 of Everyday Life to Formal Systems?	Rule 1 states that a definition should state the most essential properties of the term being defined. (Chapter 2, Everyday Life to Formal Systems)
Ka&J6?AE@^	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is Rule 2 for definition by genus and difference, according to Chapter 2 of Everyday Life to Formal Systems?	Rule 2 states that a definition must not be too broad (including things the term does not apply to) or too narrow (excluding things the term does apply to). (Chapter 2, Everyday Life to Formal Systems)
u<^2-P[p}w	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is Rule 3 for definition by genus and difference, according to Chapter 2 of Everyday Life to Formal Systems?	Rule 3 states that a definition should not be circular; it should not contain the term being defined or a synonym of the term. (Chapter 2, Everyday Life to Formal Systems)
k6n)&qwp:8	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is Rule 4 for definition by genus and difference, according to Chapter 2 of Everyday Life to Formal Systems?	Rule 4 states that a definition should use clear, neutral, and literal language, avoiding vagueness, ambiguity, or bias. (Chapter 2, Everyday Life to Formal Systems)
d47pk5^fh+	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is Rule 5 for definition by genus and difference, according to Chapter 2 of Everyday Life to Formal Systems?	Rule 5 states that a definition should be expressed affirmatively whenever possible, explaining what a term means rather than what it does not mean. (Chapter 2, Everyday Life to Formal Systems)
"K~>YorY#&&"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the purpose of translating ordinary language into categorical form?	The purpose of translating ordinary language into categorical form is to rephrase statements in terms of subject, predicate, quantity, and copula to clarify class relationships and remove ambiguity. (Chapter 2, Everyday Life to Formal Systems)
dr))UQQo|Q	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are common words that typically indicate universal propositions?	Every, each, whenever, none, only, proper names, direct references.
b~820S)5WU	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are common words that typically indicate particular propositions?	Words such as “most,” “a few,” “few,” “a part of,” “a majority of,” “a minority of,” “a portion of,” “many of,” “x% of,” and similar expressions typically indicate particular propositions. (Chapter 2, Everyday Life to Formal Systems)
Q?_W&A,}YR	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why might multiple translations of an ordinary language statement into categorical form be correct?	Multiple translations may be correct because the subject and predicate can be phrased in different but logically equivalent ways, as long as the relationship between classes is preserved. (Chapter 2, Everyday Life to Formal Systems)
OYukfb?6ce	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	"When do ""All S are P"" and ""All P are S"" mean the same?"	“All S are P” and “All P are S” mean the same only when P gives the definition of S, making the proposition tautological (true by definition). (Chapter 2, Everyday Life to Formal Systems)
I=]%JgMmKY	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is lost when translating ordinary language into particular categorical propositions?	When translating into particular categorical propositions, specific proportional information (e.g., “most” versus “a few”) is lost, since only “some” is expressed. (Chapter 2, Everyday Life to Formal Systems)
tjyjAFqd6q	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the propositional calculus?	The propositional calculus is a system within truth-functional logic that determines the truth or falsity of compound propositions from their component propositions and evaluates argument validity. (Chapter 2, Everyday Life to Formal Systems)
p(L?AR9Cju	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the role of the predicate calculus in truth-functional logic?	The predicate calculus extends propositional calculus by incorporating quantifiers and variables, reconstructing Aristotelian categorical propositions into modern logical terms. (Chapter 2, Everyday Life to Formal Systems)
mIOAj%SPO(	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is an atomic proposition in truth-functional logic?	An atomic proposition, also called a simple proposition, is a basic statement whose truth value can be evaluated independently and serves as a building block for compound propositions. (Chapter 2, Everyday Life to Formal Systems)
e~4mt`O+aV	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How are individuals and properties represented in truth-functional logic?	In truth-functional logic, individuals are represented by lowercase letters (a, b, c, …, w), while properties are represented by uppercase letters (A, B, C, …, Z) within a universe of discourse. (Chapter 2, Everyday Life to Formal Systems)
vO!x5@o<.e	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a constant in truth-functional logic?	A constant in truth-functional logic is a fixed symbol that refers to a specific individual (e.g., j for John) or property (e.g., W for being wet). (Chapter 2, Everyday Life to Formal Systems)
glGeUOV5C!	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is an individual variable in truth-functional logic?	An individual variable, such as x, y, or z, is a placeholder for individual names; when replaced with a constant, it forms a proposition with a truth value. (Chapter 2, Everyday Life to Formal Systems)
h|4BoIKHFp	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a predicate variable in truth-functional logic?	A predicate variable, often symbolised as Φ, is a placeholder for properties; when replaced with an actual property, it produces a proposition that can be evaluated as true or false. (Chapter 2, Everyday Life to Formal Systems)
xcyi*t(<wQ	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a monadic predicate?	A monadic predicate attributes a property to a single individual, which can be true or false independently of others (e.g., Wx meaning “x is wet”). (Chapter 2, Everyday Life to Formal Systems)
z:?D_GPyAj	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a two-place predicate in truth-functional logic?	A two-place predicate expresses a relationship between two individuals (e.g., Mxy meaning “x is married to y”). (Chapter 2, Everyday Life to Formal Systems)
Gfsh5A!v,<	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a three-place predicate in truth-functional logic?	A three-place predicate expresses a relationship among three individuals (e.g., Bxyz meaning “x is between y and z”). (Chapter 2, Everyday Life to Formal Systems)
cG(r<DaTU$	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is an n-place predicate in truth-functional logic?	An n-place predicate expresses a relationship among n individuals, such as TDxyzw meaning “x is playing tennis doubles with y, z, and w.” (Chapter 2, Everyday Life to Formal Systems)
uQ[|cwbt!B	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What does it mean for a two-place predicate to be commutative?	A two-place predicate is commutative if the relationship holds symmetrically (e.g., if Nxy = x is next to y, then Nyx = y is next to x), but many two-place predicates are not commutative.
v9T4;**DEE	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a compound proposition?	A compound proposition is a statement composed of two or more propositions connected by logical operators. (Chapter 2, Everyday Life to Formal Systems)
j0d{GO24v&	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a truth-functional compound proposition?	A truth-functional compound proposition is one whose truth value depends entirely on the truth values of its component propositions. (Chapter 2, Everyday Life to Formal Systems)
L2o5~C!h~P	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a negation in truth-functional logic?	A negation is a compound proposition formed by denying a statement, typically expressed with “not,” “it is false that,” or “it is not the case that.” (Chapter 2, Everyday Life to Formal Systems)
COl7~yzdMn	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a conjunction in truth-functional logic?	A conjunction is a compound proposition formed by joining two or more propositions with “and” or equivalent terms such as “but” or “while.” (Chapter 2, Everyday Life to Formal Systems)
r?,I>IC0XF	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a disjunction in truth-functional logic?	A disjunction is a compound proposition formed by joining two or more statements (called disjuncts) with the word “or.” The disjunction may be inclusive (“p or q or both”) or exclusive (“p or q but not both”). (Chapter 2, Everyday Life to Formal Systems)
jwp8`A&+3c	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a conditional in truth-functional logic?	A conditional, also called an implication, is a compound proposition of the form “if p then q,” where the first statement (p) is the antecedent and the second statement (q) is the consequent. (Chapter 2, Everyday Life to Formal Systems)
D$eq3,I6o$	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a biconditional in truth-functional logic?	A biconditional is a compound proposition of the form “p if and only if q,” meaning both propositions are either true together or false together. (Chapter 2, Everyday Life to Formal Systems)
Iy*OfEGlXY	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the components of a conditional proposition called?	The components of a conditional proposition are called the antecedent (the part following “if”) and the consequent (the part following “then”). (Chapter 2, Everyday Life to Formal Systems)
JmI8LRYUsY	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the components of a biconditional proposition called?	The components of a biconditional proposition are the left-hand component and the right-hand component, joined by the phrase “if and only if.” (Chapter 2, Everyday Life to Formal Systems)
QO-4=iR0mw	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the five standard statement connectives in truth-functional logic?	The five standard statement connectives are: negation (“not”), conjunction (“and”), disjunction (“or”), conditional (“if…then…”), and biconditional (“if and only if”). (Chapter 2, Everyday Life to Formal Systems)
JEV3yv0e+~	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How are non-standard connectives handled in truth-functional logic?	Non-standard connectives such as “but,” “while,” and “unless” are translated into the five standard connectives so that all propositions can be expressed in truth-functional form. (Chapter 2, Everyday Life to Formal Systems)
l37rEIF!Pw	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why is translation from ordinary language to truth-functional propositional forms important?	Translation into truth-functional propositional forms is important because it allows logic to calculate the truth values of compound propositions and determine argument validity using standard connectives and forms. (Chapter 2, Everyday Life to Formal Systems)
zDTxz(@hYP	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How are simple propositions handled when translating into propositional forms?	Simple propositions must be broken into their full logical components so that connectives are clearly identified, e.g., “Mary can dance and sing” is translated as “Mary can dance AND Mary can sing.” (Chapter 2, Everyday Life to Formal Systems)
Q<Ky_)f=Z@	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the levels of propositions in truth-functional logic?	Levels of propositions in truth-functional logic are: Level 1: simple propositions (e.g., p, q); Level 2: compound propositions from Level 1 (e.g., not-p, p and q); Level 3: compounds containing at least one Level 2 proposition; Level 4: compounds containing at least one Level 3 proposition; Level 5: compounds containing at least one Level 4 proposition. (Chapter 2, Everyday Life to Formal Systems)
L6+vAPSY6V	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How is the non-standard connective “unless” translated in truth-functional logic?	The non-standard connective “p unless q” is translated as “if not-q then p”.
FjC5rvv>}M	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How is the non-standard connective “neither...nor...” translated in truth-functional logic?	The non-standard connective “neither p nor q” is translated as “not-(p or q).” (Chapter 2, Everyday Life to Formal Systems)
q%nZEc=,&j	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why are symbols used in truth-functional logic instead of ordinary language connectives?	Symbols are used in truth-functional logic because ordinary language connectives carry ambiguity and nuance, whereas symbols provide precision and efficiency in expressing logical structures. (Chapter 2, Everyday Life to Formal Systems)
i2`IRLS{M+	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the symbols for the five logical connectives in truth-functional logic?	The standard symbols are: negation ~ (tilde), conjunction • (dot), disjunction ˅ (wedge), conditional ⊃ (horseshoe), and biconditional ≡ (triple bar). (Chapter 2, Everyday Life to Formal Systems)
zw+Mthc:C.	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How are simple propositions symbolized in truth-functional logic?	Simple propositions are symbolized using capital letters (e.g., P, Q, R), chosen from key words in the sentence, focusing on the logical relation between propositions rather than their content. (Chapter 2, Everyday Life to Formal Systems)
E:lT:]Wb^=	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a propositional schema in truth-functional logic?	A propositional schema is a general logical structure (e.g., ____ ⊃ ____) using blanks or variables such as p, q, r to stand for any proposition. (Chapter 2, Everyday Life to Formal Systems)
Baz;$-n*`T	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a propositional form in truth-functional logic?	A propositional form is a specific instantiation of a schema using variables (e.g., p ⊃ q), representing the logical structure of a compound proposition. (Chapter 2, Everyday Life to Formal Systems)
"htZg@&G@#N"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the role of logical punctuation in truth-functional logic?	Logical punctuation, such as parentheses and brackets, groups parts of compound propositions to eliminate ambiguity and specify the intended truth-functional structure. (Chapter 2, Everyday Life to Formal Systems)
uP3$;!azU|	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How is the negation symbol (~) interpreted when punctuation is absent?	When no parentheses are present, the negation symbol (~) applies only to the nearest component proposition, e.g., in ~p ˅ q, the negation applies only to p. (Chapter 2, Everyday Life to Formal Systems)
ur27Tw8&7y	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the purpose of logic diagrams?	Logic diagrams provide visual representations of how propositions are combined by logical operators, functioning like parentheses to clarify the intended structure. (Chapter 2, Everyday Life to Formal Systems)
"puY)}#DKe<"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What problem do logic diagrams help resolve?	Logic diagrams help resolve ambiguity in compound propositions, for example clarifying whether (p • q) ˅ r means (p • q) ˅ r or p • (q ˅ r). (Chapter 2, Everyday Life to Formal Systems)
CMY97NZ2b_	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How do logic diagrams relate to parentheses in logic?	Logic diagrams serve the same purpose as parentheses by making the order and structure of logical combinations explicit. (Chapter 2, Everyday Life to Formal Systems)
FRP0vWchgM	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Diagram: How is the simple proposition p transformed into ~p?	The simple proposition p becomes its negation ~p by applying the negation operator, which reverses its truth value (if p is true, ~p is false; if p is false, ~p is true). (Chapter 2, Everyday Life to Formal Systems)
f(.e={pAOB	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Diagram: How do p and q form the compound proposition p ˅ q?	The simple propositions p and q are joined using the disjunction connective ˅ to form the compound proposition p ˅ q, which is true if at least one of p or q is true. (Chapter 2, Everyday Life to Formal Systems)
"v7BwnXjVV#"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Diagram: Which compound propositions can be formed from p and q using •, É, and ≡ ?	p     q |     | •     É     ≡ |     |     | p•q   pÉq   p≡q
Ko!kctM>pa	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why is (p • q) ˅ r ambiguous?	The proposition (p • q) ˅ r is ambiguous because it could mean either: (a) (p • q) ˅ r, where p and q are first conjoined, then joined with r in a disjunction; or (b) p • (q ˅ r), where q and r are first disjoined, then conjoined with p. Logic diagrams or parentheses clarify which interpretation is intended. (Chapter 2, Everyday Life to Formal Systems)
wH>Uer(PTt	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a disjunctive syllogism in truth-functional logic?	A disjunctive syllogism is a valid argument form where the first premise affirms a disjunction (p ˅ q), the second premise denies one disjunct (e.g., ~p), and the conclusion affirms the other disjunct (q). (Chapter 2, Everyday Life to Formal Systems)
i3rss/}+Hx	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the steps for a valid disjunctive syllogism?	The steps are: (1) Affirm the disjunction (p ˅ q) in the first premise. (2) Deny one disjunct (e.g., ~p) in the second premise. (3) Affirm the other disjunct (q) in the conclusion. (Chapter 2, Everyday Life to Formal Systems)
O>bZzP-R)|	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What does it mean to affirm a statement in truth-functional logic?	To affirm a statement is to accept it exactly as stated, whether it is a positive statement (p) or a negative statement (~p). (Chapter 2, Everyday Life to Formal Systems)
b_W4mSF-GC	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What does it mean to deny a statement in truth-functional logic?	To deny a statement is to affirm its negation. For example, to deny P is to affirm ~P, and to deny ~P is to affirm ~~P. (Chapter 2, Everyday Life to Formal Systems)
f;RH7Y9YFE	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the fallacy of affirming a disjunct?	The fallacy of affirming a disjunct is an invalid argument form where a disjunction is affirmed in the first premise (p ˅ q), one disjunct is affirmed in the second premise (p), and the other disjunct is denied (~q) in the conclusion. This is invalid because both disjuncts could be true simultaneously. (Chapter 2, Everyday Life to Formal Systems)
:`uLQDcBF	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How is a disjunctive syllogism with more than two disjuncts valid?	A disjunctive syllogism with more than two disjuncts is valid if the first premise affirms a compound disjunction (e.g., (p ˅ q) ˅ (r ˅ s)), the second premise denies one component disjunction (e.g., ~(p ˅ q)), and the conclusion affirms the remaining disjunct (r ˅ s). (Chapter 2, Everyday Life to Formal Systems)
PtN@f*D3Tz	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the symbolic forms of valid disjunctive syllogisms?	Valid disjunctive syllogism forms include: p ˅ q, ~p, q; p ˅ q, ~q, p; ~p ˅ q, ~~p, q; ~p ˅ q, ~q, ~p; p ˅ ~q, ~p, ~q; p ˅ ~q, ~~q, p; ~p ˅ ~q, ~~p, ~q; ~p ˅ ~q, ~~q, ~p. (Chapter 2, Everyday Life to Formal Systems)
yeJJ>1WXBa	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a conditional syllogism in truth-functional logic?	A conditional syllogism is an argument in which the first premise is a conditional proposition (p ⊃ q), and the second premise and conclusion affirm or deny either the antecedent or the consequent. (Chapter 2, Everyday Life to Formal Systems)
E|B0!PKMRm	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the two moods of a conditional syllogism?	The two moods are: (1) Affirming mood (modus ponens), where the antecedent is affirmed; (2) Denying mood (modus tollens), where the consequent is denied. Both are valid forms. (Chapter 2, Everyday Life to Formal Systems)
A6A{E`t_K6	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the affirming mood (modus ponens) in a conditional syllogism?	Modus ponens is a valid form where the first premise is p ⊃ q, the second premise affirms the antecedent (p), and the conclusion affirms the consequent (q). (Chapter 2, Everyday Life to Formal Systems)
pjcm)m`(}G	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the denying mood (modus tollens) in a conditional syllogism?	Modus tollens is a valid form where the first premise is p ⊃ q, the second premise denies the consequent (~q), and the conclusion denies the antecedent (~p). (Chapter 2, Everyday Life to Formal Systems)
yh;7|~h:Xj	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the steps for a valid conditional syllogism in the affirming mood (modus ponens)?	The steps are: (1) Affirm the conditional (p ⊃ q) in the first premise. (2) Affirm the antecedent (p) in the second premise. (3) Affirm the consequent (q) in the conclusion. (Chapter 2, Everyday Life to Formal Systems)
e|2zCl7syn	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the steps for a valid conditional syllogism in the denying mood (modus tollens)?	The steps are: (1) Affirm the conditional (p ⊃ q) in the first premise. (2) Deny the consequent (~q) in the second premise. (3) Deny the antecedent (~p) in the conclusion. (Chapter 2, Everyday Life to Formal Systems)
HLzdZ8|],-	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the fallacy of affirming the consequent?	The fallacy of affirming the consequent is an invalid argument where the first premise is p ⊃ q, the second premise affirms the consequent (q), and the conclusion affirms the antecedent (p). It is invalid because q may be true for reasons other than p. (Chapter 2, Everyday Life to Formal Systems)
pK,S5S5;t0	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the fallacy of denying the antecedent?	The fallacy of denying the antecedent is an invalid argument where the first premise is p ⊃ q, the second premise denies the antecedent (~p), and the conclusion denies the consequent (~q). This is invalid because q may still be true independently of p. (Chapter 2, Everyday Life to Formal Systems)
cV0Rn(ETbC	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the valid argument forms for conditional syllogisms in the affirming mood (modus ponens)?	Valid affirming (modus ponens) forms include: p ⊃ q, p, q; ~p ⊃ q, ~p, q; p ⊃ ~q, p, ~q; ~p ⊃ ~q, ~p, ~q. (Chapter 2, Everyday Life to Formal Systems)
N1(ly!o6~[	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the valid argument forms for conditional syllogisms in the denying mood (modus tollens)?	Valid denying (modus tollens) forms include: p ⊃ q, ~q, ~p; ~p ⊃ q, ~q, p; p ⊃ ~q, q, ~p; ~p ⊃ ~q, q, p. (Chapter 2, Everyday Life to Formal Systems)
koodwDj8A}	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the invalid argument forms for conditional syllogisms?	Invalid conditional forms include: (1) Affirming the consequent: p ⊃ q, q, p; ~p ⊃ q, q, ~p; p ⊃ ~q, ~q, p; ~p ⊃ ~q, ~q, ~p. (2) Denying the antecedent: p ⊃ q, ~p, ~q; ~p ⊃ q, p, ~q; p ⊃ ~q, ~p, q; ~p ⊃ ~q, p, q. (Chapter 2, Everyday Life to Formal Systems)
Py%ymFN)}^	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the three valid argument forms summarized for truth-functional logic?	The three valid argument forms are: (1) Disjunctive Syllogism (DS): p ˅ q, ~p, q or p ˅ q, ~q, p; (2) Modus Ponens (MP): p ⊃ q, p, q; (3) Modus Tollens (MT): p ⊃ q, ~q, ~p. (Chapter 2, Everyday Life to Formal Systems)
x,|_vPvc|>	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are the three invalid argument forms summarized for truth-functional logic?	The three invalid argument forms are: (1) Affirming a disjunct (p ˅ q, p, ~q); (2) Denying the antecedent (p ⊃ q, ~p, ~q); (3) Affirming the consequent (p ⊃ q, q, p). (Chapter 2, Everyday Life to Formal Systems)
xVC)rK`5cG	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a free variable in truth-functional logic?	A free variable is a variable in a propositional form that is not bound by a quantifier or instantiated, meaning the form is neither true nor false until the variable is specified. (Chapter 2, Everyday Life to Formal Systems)
zNnazt^s+z	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a bound variable in truth-functional logic?	A bound variable is a variable in a statement form that is either instantiated with the name of a specific individual or quantified by a universal or particular quantifier, making the statement form a true or false statement.
r/TO2}21G	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How can a statement form with a free variable become a statement?	A statement form with a free variable becomes a statement either by instantiating the variable with a constant (naming an individual) or by binding it with a universal or particular quantifier. (Chapter 2, Everyday Life to Formal Systems)
MtF+F^gC5>	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What does it mean to instantiate a variable in a statement form?	To instantiate a variable is to substitute it with a constant (a specific name), which makes the statement form into a definite statement with a truth value. (Chapter 2, Everyday Life to Formal Systems)
O0w&5)B|~`	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is required for a statement form to become a statement in terms of variables?	Every variable must be either instantiated with a constant or bound by a quantifier for the form to count as a complete statement with a truth value. (Chapter 2, Everyday Life to Formal Systems)
wE~$s)|+Wh	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the truth-table method used for?	The truth-table method is used to determine the validity of an argument form by displaying all possible truth-value combinations of its premises and conclusion. (Chapter 2, Everyday Life to Formal Systems)
bXlm5Vf]WI	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What makes an argument form valid in truth-table terms?	An argument form is valid if and only if no possible row of the truth table makes all premises true and the conclusion false. (Chapter 2, Everyday Life to Formal Systems)
"K{jx8#]6IW"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the truth table of one variable (p)?	The truth table of one variable p shows its two possible truth values: p = True (T), p = False (F). (Chapter 2, Everyday Life to Formal Systems)
byts|)Fd%x	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the definition of negation (~p)?	Negation is a compound proposition formed by placing the negation operator (~) before a statement p. The truth value of ~p is the opposite of p: if p is true, ~p is false, and if p is false, ~p is true. (Chapter 2, Everyday Life to Formal Systems)
OI_ejgCURb	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Truth table for negation (~p)	The truth table for negation shows that ~p always has the opposite truth-value of p:  p   ~p  T    F  F    T  (Chapter 2, Everyday Life to Formal Systems)
BP(A?N>q*0	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What happens when multiple negations are applied?	When multiple negations are applied: an odd number of negations reverses the truth-value, while an even number of negations leaves the truth-value unchanged. (Chapter 2, Everyday Life to Formal Systems)
iEk;?w^c6G	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Truth table with multiple negations (~p, ~~p, ~~~p, ~~~~p)	The truth table for repeated negations is:  p   ~p   ~~p   ~~~p   ~~~~p  T    F     T     F      T  F    T     F     T      F  (Chapter 2, Everyday Life to Formal Systems)
Ab^u1ldZ31	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How many possible combinations of truth-values exist for two variables (p, q)?	For two variables there are four possible truth-value combinations:  p  q  T  T  T  F  F  T  F  F  (Chapter 2, Everyday Life to Formal Systems)
xx{HJa]r)m	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How many possible combinations of truth-values exist for three variables (p, q, r)?	For three variables there are eight possible truth-value combinations:  p  q  r  T  T  T  T  T  F  T  F  T  T  F  F  F  T  T  F  T  F  F  F  T  F  F  F  (Chapter 2, Everyday Life to Formal Systems)
j3?wpmLI(+	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Definition of conjunction (p • q)	A conjunction p • q is true only if both p and q are true; otherwise it is false. (Chapter 2, Everyday Life to Formal Systems)
PfU7`saxj5	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Truth table for conjunction (p • q)	The truth table for conjunction is:  p  q  p•q  T  T   T  T  F   F  F  T   F  F  F   F  (Chapter 2, Everyday Life to Formal Systems)
FkE2t2St3k	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Truth table for inclusive disjunction (p ˅ q)	The truth table for inclusive disjunction is:  p  q  p˅q  T  T   T  T  F   T  F  T   T  F  F   F  (Chapter 2, Everyday Life to Formal Systems)
Q!E+d?^J-q	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Truth table for biconditional (p ≡ q)	The truth table for the biconditional is:  p  q  p≡q  T  T   T  T  F   F  F  T   F  F  F   T  (Chapter 2, Everyday Life to Formal Systems)
A}73b96![M	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a tautology?	A tautology is a compound proposition that is true for all possible truth-value assignments of its component propositions. (Chapter 2, Everyday Life to Formal Systems)
cL$,)/7S[`	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a contradiction?	A contradiction is a compound proposition that is false for all possible truth-value assignments of its component propositions. (Chapter 2, Everyday Life to Formal Systems)
tUCpH=FzJP	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a contingency?	A contingency is a compound proposition that is true under some truth-value assignments and false under others. (Chapter 2, Everyday Life to Formal Systems)
K!gaW,>u`<	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is modus ponens?	Modus ponens is a valid deductive argument form: p ⊃ q, p, ∴ q. It is valid because there is no possible case where both premises are true and the conclusion false. (Chapter 2, Everyday Life to Formal Systems)
QIBV4j$uR_	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are quantifiers in logic?	Quantifiers express propositions without naming specific individuals: Universal quantifier (∀x): “for every x” (all, none); Existential quantifier (∃x): “there exists an x” (some). (Chapter 3, Everyday Life to Formal Systems)
uJ~9,S(sh!	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How do quantifiers correspond to Aristotelian A, E, I, O forms?	Quantifiers map onto categorical forms: A: All S are P → (∀x)(Sx ⊃ Px); E: No S are P → (∀x)(Sx ⊃ ~Px); I: Some S are P → (∃x)(Sx • Px); O: Some S are not P → (∃x)(Sx • ~Px). (Chapter 3, Everyday Life to Formal Systems)
s)MR?y_Ix7	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are relational predicates?	Relational predicates express relationships between two or more individuals. For example, Lxy means “x loves y.” (Chapter 4, An Introduction to Logic)
"s;HUz#ek?c"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Why does the order of quantifiers matter?	The order of quantifiers matters because (∀x)(∃y)Lxy (“everyone loves someone”) does not mean the same as (∃y)(∀x)Lxy (“there is someone whom everyone loves”). (Chapter 3, Everyday Life to Formal Systems)
dL8)^rBm9P	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Explain the difference between a for loop and a while loop in Python.	`for` iterates over items of an iterable (e.g., list, tuple, range, generator); the number of iterations is determined by the iterable. `while` repeats as long as its condition is True and may run indefinitely if the condition never becomes False.
q~LgWN!%y5	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the quality of a copula in a categorical proposition?	The quality of the copula in a categorical proposition indicates whether it affirms inclusion (affirmative) or denies inclusion (negative) between the subject and predicate categories. (Chapter 1, Everyday Life to Formal Systems)
"mg#i,U`R&!"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the denotative meaning of a term?	The denotative meaning of a term is its extension, referring to the actual individuals or objects in the class to which the term applies. (Chapter 1, Everyday Life to Formal Systems)
KbIn2$jq0d	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is the genus in a connotative definition?	The genus in a connotative definition is the general class to which the term belongs, of which the definiendum is a subclass. (Chapter 1, Everyday Life to Formal Systems)
d]=_lQ5NN8	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What are common words that typically indicate universal propositions?	Words such as “every,” “each,” “whenever,” “none,” “only,” and proper names or direct references typically indicate universal propositions. (Chapter 2, Everyday Life to Formal Systems)
IvEau?As,	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What does it mean for a two-place predicate to be commutative?	A two-place predicate is commutative if the relationship holds symmetrically in both directions (e.g., if Nxy means “x is next to y,” then Nyx means “y is next to x”). (Chapter 2, Everyday Life to Formal Systems)
"P<yKYl#Q6j"	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	How is the non-standard connective “unless” translated in truth-functional logic?	The non-standard connective “p unless q” is translated as “if not-q then p.” (Chapter 2, Everyday Life to Formal Systems)
IHjHM>B:80	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	Diagram: Which compound propositions can be formed from p and q using •, ˅, and ≡ ?	From the simple propositions p and q, the following compounds can be formed: p • q (conjunction, “p and q”), p ˅ q (disjunction, “p or q”), and p ≡ q (biconditional, “p if and only if q”). (Chapter 2, Everyday Life to Formal Systems)
gyi%a,v5kV	Basic	Launch into Computing::Unit 02 - Logical Foundations: Boolean Algebra, Gates, and Set Theory	What is a bound variable in truth-functional logic?	A bound variable is one that has been either instantiated with a specific individual constant or bound by a quantifier, making the statement true or false. (Chapter 2, Everyday Life to Formal Systems)
